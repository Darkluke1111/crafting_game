{
	"Sickle UI widget": {
		"scope": "rust",
		"prefix": ["sickle"],
		"body": [
			"#[derive(Component, Debug, Default, Reflect)]",
			"#[reflect(Component)]",
			"pub struct ${1:MyWidget};",
			"",
			"impl ${1:MyWidget} {",
			"	fn frame() -> impl Bundle {",
			"		(Name::new(\"${2:My Widget}\"), NodeBundle::default())",
			"	}",
			"}",
			"",
			"pub trait Ui${1:MyWidget}Ext {",
			"	fn ${3:my_widget}(",
			"		&mut self,",
			"		spawn_children: impl FnOnce(&mut UiBuilder<Entity>),",
			"	) -> UiBuilder<Entity>;",
			"}",
			"",
			"impl Ui${1:MyWidget}Ext for UiBuilder<'_, Entity> {",
			"	fn ${3:my_widget}(",
			"		&mut self,",
			"		spawn_children: impl FnOnce(&mut UiBuilder<Entity>),",
			"	) -> UiBuilder<Entity> {",
			"		self.container((${1:MyWidget}::frame(), ${1:MyWidget}), spawn_children)",
			"	}",
			"}",
		],
		"description": "Template for a Sickle UI widget extension on UiBuilder"
	},

	"Sickle UI plugin widget": {
		"scope": "rust",
		"prefix": ["sickle"],
		"body": [
			"pub struct ${1:MyWidget}Plugin;",
			"",
			"impl Plugin for ${1:MyWidget}Plugin {",
			"	fn build(&self, _app: &mut App) {",
			"		// TODO",
			"	}",
			"}",
			"",
			"#[derive(Component, Debug, Default, Reflect)]",
			"#[reflect(Component)]",
			"pub struct ${1:MyWidget};",
			"",
			"impl ${1:MyWidget} {",
			"	fn frame() -> impl Bundle {",
			"		(Name::new(\"${2:My Widget}\"), NodeBundle::default())",
			"	}",
			"}",
			"",
			"pub trait Ui${1:MyWidget}Ext {",
			"	fn ${3:my_widget}(",
			"		&mut self,",
			"		spawn_children: impl FnOnce(&mut UiBuilder<Entity>),",
			"	) -> UiBuilder<Entity>;",
			"}",
			"",
			"impl Ui${1:MyWidget}Ext for UiBuilder<'_, Entity> {",
			"	fn ${3:my_widget}(",
			"		&mut self,",
			"		spawn_children: impl FnOnce(&mut UiBuilder<Entity>),",
			"	) -> UiBuilder<Entity> {",
			"		self.container((${1:MyWidget}::frame(), ${1:MyWidget}), spawn_children)",
			"	}",
			"}",
		],
		"description": "Template for a Sickle UI plugin widget extension on UiBuilder"
	},

	"Sickle UI themed plugin widget": {
		"scope": "rust",
		"prefix": ["sickle"],
		"body": [
			"pub struct ${1:MyWidget}Plugin;",
			"",
			"impl Plugin for ${1:MyWidget}Plugin {",
			"	fn build(&self, app: &mut App) {",
			"		app.add_plugins(ComponentThemePlugin::<${1:MyWidget}>::default());",
			"	}",
			"}",
			"",
			"#[derive(Component, Debug, Default, Reflect, UiContext)]",
			"#[reflect(Component)]",
			"pub struct ${1:MyWidget};",
			"",
			"impl DefaultTheme for ${1:MyWidget} {",
			"	fn default_theme() -> Option<Theme<${1:MyWidget}>> {",
			"		${1:MyWidget}::theme().into()",
			"	}",
			"}",
			"",
			"impl ${1:MyWidget} {",
			"	pub fn theme() -> Theme<${1:MyWidget}> {",
			"		let base_theme = PseudoTheme::deferred(None, ${1:MyWidget}::primary_style);",
			"		Theme::new(vec![base_theme])",
			"	}",
			"",
			"	fn primary_style(style_builder: &mut StyleBuilder, theme_data: &ThemeData) {",
			"		let theme_spacing = theme_data.spacing;",
			"		let colors = theme_data.colors();",
			"",
			"		style_builder",
			"			.background_color(colors.surface(Surface::Surface))",
			"			.padding(UiRect::all(Val::Px(theme_spacing.gaps.small)));",
			"	}",
			"",
			"	fn frame() -> impl Bundle {",
			"		(Name::new(\"${2:My Widget}\"), NodeBundle::default())",
			"	}",
			"}",
			"",
			"pub trait Ui${1:MyWidget}Ext {",
			"	fn ${3:my_widget}(",
			"		&mut self,",
			"		spawn_children: impl FnOnce(&mut UiBuilder<Entity>),",
			"	) -> UiBuilder<Entity>;",
			"}",
			"",
			"impl Ui${1:MyWidget}Ext for UiBuilder<'_, Entity> {",
			"	fn ${3:my_widget}(",
			"		&mut self,",
			"		spawn_children: impl FnOnce(&mut UiBuilder<Entity>),",
			"	) -> UiBuilder<Entity> {",
			"		self.container((${1:MyWidget}::frame(), ${1:MyWidget}), spawn_children)",
			"	}",
			"}",
		],
		"description": "Template for a Sickle UI themed plugin widget"
	},

	"Sickle UI contexted themed plugin widget": {
		"scope": "rust",
		"prefix": ["sickle"],
		"body": [
			"pub struct ${1:MyWidget}Plugin;",
			"",
			"impl Plugin for ${1:MyWidget}Plugin {",
			"	fn build(&self, app: &mut App) {",
			"		app.add_plugins(ComponentThemePlugin::<${1:MyWidget}>::default());",
			"	}",
			"}",
			"",
			"#[derive(Component, Debug, Reflect)]",
			"#[reflect(Component)]",
			"pub struct ${1:MyWidget} {",
			"	label: Entity,",
			"}",
			"",
			"impl Default for ${1:MyWidget} {",
			"	fn default() -> Self {",
			"		Self {",
			"			label: Entity::PLACEHOLDER,",
			"		}",
			"	}",
			"}",
			"",
			"impl DefaultTheme for ${1:MyWidget} {",
			"	fn default_theme() -> Option<Theme<${1:MyWidget}>> {",
			"		${1:MyWidget}::theme().into()",
			"	}",
			"}",
			"",			
			"impl UiContext for ${1:MyWidget} {",
			"	fn get(&self, target: &str) -> Result<Entity, String> {",
			"		match target {",
			"			${1:MyWidget}::LABEL => Ok(self.label),",
			"			_ => Err(format!(",
			"				\"{} doesn't exist for ${1:MyWidget}. Possible contexts: {:?}\",",
			"				target,",
			"				self.contexts()",
			"			)),",
			"		}",
			"	}",
			"",
			"	fn contexts(&self) -> Vec<&'static str> {",
			"		vec![${1:MyWidget}::LABEL]",
			"	}",
			"}",
			"",
			"impl ${1:MyWidget} {",
			"	pub const LABEL: &'static str = \"Label\";",
			"",
			"	pub fn theme() -> Theme<${1:MyWidget}> {",
			"		let base_theme = PseudoTheme::deferred(None, ${1:MyWidget}::primary_style);",
			"		Theme::new(vec![base_theme])",
			"	}",
			"",
			"	fn primary_style(style_builder: &mut StyleBuilder, theme_data: &ThemeData) {",
			"		let theme_spacing = theme_data.spacing;",
			"		let colors = theme_data.colors();",
			"		let font = theme_data",
			"			.text",
			"			.get(FontStyle::Body, FontScale::Medium, FontType::Regular);",
			"",
			"		style_builder",
			"			.background_color(colors.surface(Surface::Surface))",
			"			.padding(UiRect::all(Val::Px(theme_spacing.gaps.small)));",
			"",
			"		style_builder",
			"			.switch_target(${1:MyWidget}::LABEL)",
			"			.sized_font(font);",
			"	}",
			"",
			"	fn frame() -> impl Bundle {",
			"		(Name::new(\"${2:My Widget}\"), NodeBundle::default())",
			"	}",
			"}",
			"",
			"pub trait Ui${1:MyWidget}Ext {",
			"	fn ${3:my_widget}(",
			"		&mut self,",
			"		spawn_children: impl FnOnce(&mut UiBuilder<Entity>),",
			"	) -> UiBuilder<Entity>;",
			"}",
			"",
			"impl Ui${1:MyWidget}Ext for UiBuilder<'_, Entity> {",
			"	fn ${3:my_widget}(",
			"		&mut self,",
			"		spawn_children: impl FnOnce(&mut UiBuilder<Entity>),",
			"	) -> UiBuilder<Entity> {",
			"		let label = self",
			"			.label(LabelConfig {",
			"				label: \"${1:MyWidget}\".into(),",
			"				..default()",
			"			})",
			"			.id();",
			"",
			"		self.container((${1:MyWidget}::frame(), ${1:MyWidget} { label }), spawn_children)",
			"	}",
			"}",
		],
		"description": "Template for a Sickle UI context-aware themed plugin widget"
	}
}
